arithmetic {n_ : INTEGER; STRING: TYPE} : CONTEXT = BEGIN
IMPORTING trilean;
IMPORTING value{n_, STRING};
IMPORTING option{VALUE};

SomeNum? : [option{VALUE} ! B_OPTION -> BOOLEAN] =
LAMBDA(x1 : option{VALUE} ! B_OPTION):
IF Some?(x1) THEN
   Num?(valueOf(x1))
ELSE
  FALSE
ENDIF;

maybe_arith_int : [[[[INTEGER, INTEGER] -> INTEGER], OPTION, OPTION] -> OPTION] =
LAMBDA(f: [[INTEGER, INTEGER] -> INTEGER], x1 : OPTION, x2: OPTION):
IF Some?(x1) AND Some?(x2) THEN
  IF Num?(valueOf(x1)) AND Num?(valueOf(x2))
  THEN
    Some(Num(f(intOf(valueOf(x1)), intOf(valueOf(x2)))))
  ELSE
    None
  ENDIF
ELSE
  None
ENDIF;

value_plus : [[OPTION, OPTION] -> OPTION] =
LAMBDA(x: OPTION, y: OPTION): maybe_arith_int(LAMBDA(x: INTEGER, y: INTEGER): x + y, x, y);

value_minus : [[OPTION, OPTION] -> OPTION] =
LAMBDA(x: OPTION, y: OPTION): maybe_arith_int(LAMBDA(x: INTEGER, y: INTEGER): x - y, x, y);

value_mul : [[OPTION, OPTION] -> OPTION] =
LAMBDA(x: OPTION, y: OPTION): maybe_arith_int(LAMBDA(x: INTEGER, y: INTEGER): x * y, x, y);

maybe_bool_int : [[[[INTEGER, INTEGER] -> BOOLEAN], OPTION, OPTION] -> TRILEAN] =
LAMBDA(f: [[INTEGER, INTEGER] -> BOOLEAN], x1 : OPTION, x2: OPTION):
IF Some?(x1) AND Some?(x2) THEN
  IF Num?(valueOf(x1)) AND Num?(valueOf(x2))
  THEN
    IF f(intOf(valueOf(x1)), intOf(valueOf(x2))) THEN True ELSE False ENDIF
  ELSE
    Invalid
  ENDIF
ELSE
  Invalid
ENDIF;

value_gt : [[OPTION, OPTION] -> TRILEAN] =
LAMBDA(x: OPTION, y: OPTION): maybe_bool_int(LAMBDA(x: INTEGER, y: INTEGER): x > y, x, y);

value_lt : [[OPTION, OPTION] -> TRILEAN] =
LAMBDA(x: OPTION, y: OPTION): maybe_bool_int(LAMBDA(x: INTEGER, y: INTEGER): x < y, x, y);

value_ge : [[OPTION, OPTION] -> TRILEAN] =
LAMBDA(x: OPTION, y: OPTION): maybe_bool_int(LAMBDA(x: INTEGER, y: INTEGER): x >= y, x, y);

value_le : [[OPTION, OPTION] -> TRILEAN] =
LAMBDA(x: OPTION, y: OPTION): maybe_bool_int(LAMBDA(x: INTEGER, y: INTEGER): x <= y, x, y);

value_eq : [[OPTION, OPTION] -> TRILEAN] =
LAMBDA(x: OPTION, y: OPTION): IF x = y THEN True ELSE False ENDIF;

check_underflow : [OPTION -> BOOLEAN] = LAMBDA(v : OPTION) :
    IF Some?(v) THEN
        IF Num?(valueOf(v)) THEN
            gval(value_ge(v, Some(Num(0-n_))))
        ELSE
            TRUE
        ENDIF
    ELSE
        TRUE
    ENDIF;

check_overflow : [OPTION -> BOOLEAN] = LAMBDA(v : OPTION) :
    IF Some?(v) THEN
        IF Num?(valueOf(v)) THEN
            gval(value_le(v, Some(Num(n_))))
        ELSE
            TRUE
        ENDIF
    ELSE
        TRUE
    ENDIF;


check_bounds : [OPTION -> BOOLEAN] = LAMBDA(v : OPTION) :
    IF Some?(v) THEN
        IF Num?(valueOf(v)) THEN
            gval(value_ge(v, Some(Num(0-n_)))) AND gval(value_le(v, Some(Num(n_))))
        ELSE
            TRUE
        ENDIF
    ELSE
        TRUE
    ENDIF;

END
